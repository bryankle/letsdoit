10/16 - Goals

- Associate added tasks to user currently signed in (assign userId to task)
- Clicking checkbox of task will mark task as completed in database ( { complete: true } )
- Will move task from 'Active' to 'Completed'
- Implement option to 'Clear all' completed tasks
- Implement loading bar to correlate with percentage of task completed ( active / all )
- Motivational quote API
- API to analyze tasks

LONG TERM GOALS
- Team task board: join a team and organize tasks
- Team can see what tasks you have completed and tasks can be assigned to team members
- 

10/16
- Where is passport serialize and deserialize inside this applicat.



10/11 Notes
- Tried importing AddTask query method from database, unable to due to create-react-app restriction of importing modules outside of src folder
- Suggestion 
	- Import query methods into server routes for GET/POST/UDPATE/DELETE
	- Use axios to communicate to database through server
	- User adds task --> axios POST --> accesses POST route on express --> query to DB established and task added to DB --> reload tasks from DB to redux --> re render all tasks

- uuse redux thunk for axios async

- User Authentication Flow
	1. User logs in
	2. Successful login
	3. User name and ID recorded into state
	4. Perform GET request for user tasks through /api/user/:userId/tasks


NOTES
	Error handling
		- Begin at signin/signup route in routes/index.js with POST data going through controllers/authentication.js 
		- Error handling conditions triggered in controllers/authentication
		- On signin/signup form component, signin/signp action in action/index.js will make async call to corresponding server route to verify user information with database
	Secure routes
		- Higher order component used RequireAuth

	Index route - use for localstorage task holder
	Authenticated API request - always include JWT token
		Q - why does initial task load not require token?